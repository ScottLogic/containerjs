#!/usr/bin/env node

const openfinLauncher = require('openfin-launcher');
const fs = require('fs-extra');
const path = require('path');
const program = require('commander');

program
  .option('-c, --config [filename]', 'ContainerJS config file', 'app.json')
  .option('-o, --output-config [filename]', 'Where to output the OpenFin config file', 'openfinApp.json')
  .option('-v, --version [version]', 'Version of the OpenFin runtime to use, default is stable', 'stable')
  .option('-u, --url [url]', '(Optional) Url to read the new app.json file from to start OpenFin')
  .option('-n, --notification [directory]', '(Optional) Generate an example notification file in the specified directory')
  .option('-s, --symphony', '(Optional) Use Symphony compatibility layer', (v, val) => true, false)
  .parse(process.argv);

const openfinConfigFile = path.join(process.cwd(), program.outputConfig);
const configFile = path.join(process.cwd(), program.config);
const preloadFile = program.symphony ? 'containerjs-api-symphony.js' : 'containerjs-api.js';
const preloadPath = path.join(__dirname, `../build/dist/${preloadFile}`);
const notificationFile = path.join(__dirname, '../build/dist/notification.html');

const fileError = (filename, err) => {
  console.error('Error with file: ' + filename);
  console.error(err);
};

const openfinConfig = {
  'devtools_port': 9090,
  'startup_app': {},
  'runtime': {
    'version': program.version
  },
  'shortcut': {}
};

if (fs.existsSync(configFile)) {
  const parsedConfig = JSON.parse(fs.readFileSync(configFile));
  parsedConfig.preload = preloadPath;
  openfinConfig.startup_app = parsedConfig;
  fs.writeFileSync(openfinConfigFile, JSON.stringify(openfinConfig));
  if (program.notification) {
    fs.copySync(notificationFile, program.notification);
  }

  openfinLauncher.launchOpenFin({
    configPath: program.url || openfinConfigFile
  })
  .fail(() => {
    console.error('Failed to launch OpenFin');
  });
} else {
  fileError(configFile, 'Config file does not exist');
}
